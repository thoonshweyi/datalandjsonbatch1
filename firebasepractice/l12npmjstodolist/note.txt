// https://firebase.google.com/ > Docs > Overview > Firebase fundamentals > Web icon > Available libraries documentation > Click  "Available Firebase JS SDKs (from the CDN)"

// npm init or npm init -y
// npm install firebase     or      npm install firebase@latest
// npm install express      or      npm install express@latest

=>How to use Vite
1.Install 
     npm install --save-dev vite@latest

2.Create a new file as vite.config.js
     import {defineConfig} from "vite";

     export default defineConfig({
          root: './src',
          build:{
               outDir: "../dist" // define the output directory for to build files
          }
     });

3.Update package.json
     "scripts": {
          "test": "echo \"Error: no test specified\" && exit 1",
          "start": "node server.js",
          "dev": "vite",
          "build": "vite build"
     },
4.Run Build the app for production
     npm run build
5.Run Vite in development server
     npm run dev

For Vite Server 
     npm run dev
     http://localhost:5173/

For Express Server 
     =In server.js 
          exapp.use(express.static('dist')); 

     npm run start 
     http://localhost:8001/


=>Direct Changes Effect 
     => Root Folder 
          src > index.html
          ****Vite reload index.html file after saving Changes and instant effect 
          Experss do not recongnize changes immediately. npm run build.

     => Public Folder 
          dist > index.html
          Vite do not respond to any changes.                    
          ****Express don't need to reaload to take effect


     Vite watch root folder 
     Express work on public folder



Why is the parameter optional? getFirestore()
Single App Scenario: In most projects, you initialize only one Firebase app. The getFirestore() function is designed to automatically use this default app, making the parameter optional.
Multiple App Scenario: If you are working with multiple Firebase apps, passing the app parameter ensures Firestore operations are linked to the correct app.